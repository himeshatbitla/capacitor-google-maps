{"version":3,"file":"implementation.js","sourceRoot":"","sources":["../../src/implementation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AA8NjD,MAAM,mBAAmB,GAAG,cAAc,CACxC,qBAAqB,EACrB;IACE,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,sBAAsB,EAAE,CAAC;CACrE,CACF,CAAC;AAEF,mBAAmB,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE;;IACrD,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACjB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAEjB,MAAM,IAAI,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAuB,CAAC;IACnE,MAAM,UAAU,SAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,UAAU,CAAC;IAC7C,MAAM,UAAU,GAAG,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC;IAE7C,mBAAmB,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;AAC9E,CAAC,CAAC,CAAC;AAEH,OAAO,EAAE,mBAAmB,EAAE,CAAC","sourcesContent":["import type { Plugin } from '@capacitor/core';\r\nimport { registerPlugin } from '@capacitor/core';\r\n\r\nimport type {\r\n  CameraConfig,\r\n  Circle,\r\n  GoogleMapConfig,\r\n  LatLng,\r\n  LatLngBounds,\r\n\r\n  MapPadding,\r\n  MapType,\r\n  Marker,\r\n\r\n  Polygon,\r\n  Polyline,\r\n} from './definitions';\r\n\r\n/**\r\n * An interface containing the options used when creating a map.\r\n */\r\nexport interface CreateMapArgs {\r\n  /**\r\n   * A unique identifier for the map instance.\r\n   */\r\n  id: string;\r\n  /**\r\n   * The Google Maps SDK API Key.\r\n   */\r\n  apiKey: string;\r\n  /**\r\n   * The initial configuration settings for the map.\r\n   */\r\n  config: GoogleMapConfig;\r\n  /**\r\n   * The DOM element that the Google Map View will be mounted on which determines size and positioning.\r\n   */\r\n  element: HTMLElement;\r\n  /**\r\n   * Destroy and re-create the map instance if a map with the supplied id already exists\r\n   * @default false\r\n   */\r\n  forceCreate?: boolean;\r\n  /**\r\n   * The region parameter alters your application to serve different map tiles or bias the application (such as biasing geocoding results towards the region).\r\n   *\r\n   * Only available for web.\r\n   */\r\n  region?: string;\r\n\r\n  /**\r\n   * The language parameter affects the names of controls, copyright notices, driving directions, and control labels, as well as the responses to service requests.\r\n   *\r\n   * Only available for web.\r\n   */\r\n  language?: string;\r\n}\r\n\r\nexport interface DestroyMapArgs {\r\n  id: string;\r\n}\r\n\r\nexport interface RemoveMarkerArgs {\r\n  id: string;\r\n  markerId: string;\r\n}\r\n\r\nexport interface RemoveMarkersArgs {\r\n  id: string;\r\n  markerIds: string[];\r\n}\r\n\r\nexport interface AddMarkerArgs {\r\n  id: string;\r\n  marker: Marker;\r\n}\r\n\r\nexport interface AddPolygonsArgs {\r\n  id: string;\r\n  polygons: Polygon[];\r\n}\r\n\r\nexport interface RemovePolygonsArgs {\r\n  id: string;\r\n  polygonIds: string[];\r\n}\r\n\r\nexport interface AddCirclesArgs {\r\n  id: string;\r\n  circles: Circle[];\r\n}\r\n\r\nexport interface RemoveCirclesArgs {\r\n  id: string;\r\n  circleIds: string[];\r\n}\r\nexport interface AddPolylinesArgs {\r\n  id: string;\r\n  polylines: Polyline[];\r\n}\r\n\r\nexport interface RemovePolylinesArgs {\r\n  id: string;\r\n  polylineIds: string[];\r\n}\r\n\r\nexport interface CameraArgs {\r\n  id: string;\r\n  config: CameraConfig;\r\n}\r\n\r\nexport interface MapTypeArgs {\r\n  id: string;\r\n  mapType: MapType;\r\n}\r\n\r\nexport interface IndoorMapArgs {\r\n  id: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface TrafficLayerArgs {\r\n  id: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface AccElementsArgs {\r\n  id: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface PaddingArgs {\r\n  id: string;\r\n  padding: MapPadding;\r\n}\r\n\r\nexport interface CurrentLocArgs {\r\n  id: string;\r\n  enabled: boolean;\r\n}\r\nexport interface AddMarkersArgs {\r\n  id: string;\r\n  markers: Marker[];\r\n}\r\n\r\nexport interface MapBoundsArgs {\r\n  id: string;\r\n  mapBounds: {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n  };\r\n}\r\n\r\nexport interface MapBoundsContainsArgs {\r\n  bounds: LatLngBounds;\r\n  point: LatLng;\r\n}\r\n\r\nexport type MapBoundsExtendArgs = MapBoundsContainsArgs;\r\n\r\nexport interface EnableClusteringArgs {\r\n  id: string;\r\n  minClusterSize?: number;\r\n}\r\n\r\nexport interface MarkerUpdate {\r\n  id: string;\r\n  markerId: string;\r\n  marker: Marker;\r\n}\r\n\r\nexport interface FitBoundsArgs {\r\n  id: string;\r\n  bounds: LatLngBounds;\r\n  padding?: number;\r\n}\r\n\r\n\r\n\r\nexport interface CapacitorGoogleMapsPlugin extends Plugin {\r\n  create(options: CreateMapArgs): Promise<void>;\r\n  enableTouch(args: { id: string }): Promise<void>;\r\n  disableTouch(args: { id: string }): Promise<void>;\r\n\r\n  // add support for updating lat long of marker\r\n\r\n  addMarker(args: AddMarkerArgs): Promise<{ id: string }>;\r\n  updateMarker(args: MarkerUpdate): Promise<void>;\r\n\r\n  addMarkers(args: AddMarkersArgs): Promise<{ ids: string[] }>;\r\n  removeMarker(args: RemoveMarkerArgs): Promise<void>;\r\n  removeMarkers(args: RemoveMarkersArgs): Promise<void>;\r\n  addPolygons(args: AddPolygonsArgs): Promise<{ ids: string[] }>;\r\n  removePolygons(args: RemovePolygonsArgs): Promise<void>;\r\n  addCircles(args: AddCirclesArgs): Promise<{ ids: string[] }>;\r\n  removeCircles(args: RemoveCirclesArgs): Promise<void>;\r\n  addPolylines(args: AddPolylinesArgs): Promise<{ ids: string[] }>;\r\n  removePolylines(args: RemovePolylinesArgs): Promise<void>;\r\n  enableClustering(args: EnableClusteringArgs): Promise<void>;\r\n  disableClustering(args: { id: string }): Promise<void>;\r\n  destroy(args: DestroyMapArgs): Promise<void>;\r\n  setCamera(args: CameraArgs): Promise<void>;\r\n  getMapType(args: { id: string }): Promise<{ type: string }>;\r\n  setMapType(args: MapTypeArgs): Promise<void>;\r\n  enableIndoorMaps(args: IndoorMapArgs): Promise<void>;\r\n  enableTrafficLayer(args: TrafficLayerArgs): Promise<void>;\r\n  enableAccessibilityElements(args: AccElementsArgs): Promise<void>;\r\n  enableCurrentLocation(args: CurrentLocArgs): Promise<void>;\r\n  setPadding(args: PaddingArgs): Promise<void>;\r\n  onScroll(args: MapBoundsArgs): Promise<void>;\r\n  onResize(args: MapBoundsArgs): Promise<void>;\r\n  onDisplay(args: MapBoundsArgs): Promise<void>;\r\n  dispatchMapEvent(args: { id: string; focus: boolean }): Promise<void>;\r\n  getMapBounds(args: { id: string }): Promise<LatLngBounds>;\r\n  fitBounds(args: FitBoundsArgs): Promise<void>;\r\n  mapBoundsContains(\r\n    args: MapBoundsContainsArgs,\r\n  ): Promise<{ contains: boolean }>;\r\n  mapBoundsExtend(args: MapBoundsExtendArgs): Promise<{ bounds: LatLngBounds }>;\r\n}\r\n\r\nconst CapacitorGoogleMaps = registerPlugin<CapacitorGoogleMapsPlugin>(\r\n  'CapacitorGoogleMaps',\r\n  {\r\n    web: () => import('./web').then(m => new m.CapacitorGoogleMapsWeb()),\r\n  },\r\n);\r\n\r\nCapacitorGoogleMaps.addListener('isMapInFocus', data => {\r\n  const x = data.x;\r\n  const y = data.y;\r\n\r\n  const elem = document.elementFromPoint(x, y) as HTMLElement | null;\r\n  const internalId = elem?.dataset?.internalId;\r\n  const mapInFocus = internalId === data.mapId;\r\n\r\n  CapacitorGoogleMaps.dispatchMapEvent({ id: data.mapId, focus: mapInFocus });\r\n});\r\n\r\nexport { CapacitorGoogleMaps };\r\n"]}